;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name redlobster.events, :imports nil, :requires nil, :uses nil, :defs {unpack-event {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 16, :column 7, :end-line 16, :end-column 19, :arglists (quote ([event]))}, :name redlobster.events/unpack-event, :variadic false, :file "out/redlobster/events.cljs", :end-column 19, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, listeners {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 11, :column 4, :end-line 11, :end-column 13, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/listeners, :variadic false, :file "out/redlobster/events.cljs", :end-column 13, :method-params ([emitter event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([emitter event])), :doc nil}, event-emitter {:name redlobster.events/event-emitter, :file "out/redlobster/events.cljs", :line 97, :column 9, :end-line 97, :end-column 27, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 97, :column 14, :end-line 97, :end-column 27}}, def-rem-listener {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 33, :column 8, :end-line 33, :end-column 24, :private true, :arglists (quote ([type listener]))}, :private true, :name redlobster.events/def-rem-listener, :variadic false, :file "out/redlobster/events.cljs", :end-column 24, :method-params ([type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type listener]))}, remove-all-listeners {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 10, :column 4, :end-line 10, :end-column 24, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/remove-all-listeners, :variadic false, :file "out/redlobster/events.cljs", :end-column 24, :method-params ([emitter event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([emitter event])), :doc nil}, remove-listener {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 8, :column 4, :end-line 8, :end-column 19, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event listener]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/remove-listener, :variadic false, :file "out/redlobster/events.cljs", :end-column 19, :method-params ([emitter event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 8, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event listener])), :doc nil}, emitter-type {:name redlobster.events/emitter-type, :file "out/redlobster/events.cljs", :line 98, :column 9, :end-line 98, :end-column 26, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 98, :column 14, :end-line 98, :end-column 26}}, def-add-listener {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 28, :column 8, :end-line 28, :end-column 24, :private true, :arglists (quote ([type listener]))}, :private true, :name redlobster.events/def-add-listener, :variadic false, :file "out/redlobster/events.cljs", :end-column 24, :method-params ([type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type listener]))}, wrap-once {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 21, :column 7, :end-line 21, :end-column 16, :arglists (quote ([emitter event listener]))}, :name redlobster.events/wrap-once, :variadic false, :file "out/redlobster/events.cljs", :end-column 16, :method-params ([emitter event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event listener]))}, implementations {:name redlobster.events/implementations, :file "out/redlobster/events.cljs", :line 61, :column 1, :end-line 61, :end-column 31, :private true, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 61, :column 16, :end-line 61, :end-column 31, :private true}}, IEventEmitter {:meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 5, :column 14, :end-line 5, :end-column 27, :doc nil, :protocol-symbol true, :protocol-info {:methods {on [[emitter event listener]], once [[emitter event listener]], remove-listener [[emitter event listener]], remove-all-listeners [[emitter event]], listeners [[emitter event]], emit [[emitter event data]]}}}, :protocol-symbol true, :name redlobster.events/IEventEmitter, :file "out/redlobster/events.cljs", :end-column 27, :column 1, :line 5, :protocol-info {:methods {on [[emitter event listener]], once [[emitter event listener]], remove-listener [[emitter event listener]], remove-all-listeners [[emitter event]], listeners [[emitter event]], emit [[emitter event data]]}}, :info nil, :end-line 5, :impls #{redlobster.events/EventEmitter redlobster.events/DefaultEventEmitter}, :doc nil}, once {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 7, :column 4, :end-line 7, :end-column 8, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event listener]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/once, :variadic false, :file "out/redlobster/events.cljs", :end-column 8, :method-params ([emitter event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event listener])), :doc nil}, DefaultEventEmitter {:num-fields 1, :protocols #{redlobster.events/IEventEmitter}, :name redlobster.events/DefaultEventEmitter, :file "out/redlobster/events.cljs", :end-column 29, :type true, :column 10, :line 38, :record false, :end-line 38, :skip-protocol-flag nil}, emit {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 12, :column 4, :end-line 12, :end-column 8, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event data]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/emit, :variadic false, :file "out/redlobster/events.cljs", :end-column 8, :method-params ([emitter event data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event data])), :doc nil}, ->DefaultEventEmitter {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 38, :column 10, :end-line 38, :end-column 29, :protocols #{redlobster.events/IEventEmitter}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([events]))}, :protocols #{redlobster.events/IEventEmitter}, :name redlobster.events/->DefaultEventEmitter, :variadic false, :file "out/redlobster/events.cljs", :end-column 29, :method-params ([events]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([events])), :skip-protocol-flag nil}, on {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cljs-pdfkit/cljs-pdfkit-demo/out/redlobster/events.cljs", :line 6, :column 4, :end-line 6, :end-column 6, :protocol redlobster.events/IEventEmitter, :doc nil, :arglists (quote ([emitter event listener]))}, :protocol redlobster.events/IEventEmitter, :name redlobster.events/on, :variadic false, :file "out/redlobster/events.cljs", :end-column 6, :method-params ([emitter event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([emitter event listener])), :doc nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:init :else :default :type :node events :constructor}, :order [events :else :constructor :type :init :node :default]}, :doc nil}